/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Main configuration for the capture session */
export interface CaptureConfig {
  /** Audio capture configuration */
  audio: AudioCaptureConfig
  /** Screen capture configuration  */
  screen: ScreenCaptureConfig
  /** Output format settings */
  output: OutputFormat
}
/** Audio capture configuration */
export interface AudioCaptureConfig {
  /** Enable audio capture */
  enabled: boolean
  /** Capture system audio (computer output) */
  systemAudio: boolean
  /** Capture microphone input */
  microphone: boolean
  /** Audio sample rate (e.g., 44100, 48000) */
  sampleRate: number
  /** Audio channels (1 for mono, 2 for stereo) */
  channels: number
  /** Segment duration in milliseconds for real-time processing */
  segmentDurationMs: number
  /** Audio device ID for microphone (None for default) */
  microphoneDeviceId?: string
  /** Audio format for output */
  format: AudioFormat
}
/** Screen capture configuration */
export interface ScreenCaptureConfig {
  /** Enable screen capture */
  enabled: boolean
  /** Display ID to capture (None for primary display) */
  displayId?: number
  /** Capture frame rate */
  fps: number
  /** Capture quality (0-100) */
  quality: number
  /** Include cursor in capture */
  includeCursor: boolean
  /** Capture specific window ID (None for full screen) */
  windowId?: number
}
/** Output format configuration */
export interface OutputFormat {
  /** Audio output format */
  audio: AudioFormat
  /** Video output format (if screen capture is enabled) */
  video: VideoFormat
  /** Output directory for segments */
  outputDir?: string
  /** Enable real-time streaming */
  realTime: boolean
}
/** Supported audio formats */
export const enum AudioFormat {
  /** AAC audio format (recommended for transcription) */
  Aac = 0,
  /** MP3 audio format */
  Mp3 = 1,
  /** WAV audio format */
  Wav = 2,
  /** Raw PCM data */
  Raw = 3
}
/** Supported video formats */
export const enum VideoFormat {
  /** MP4 container with H.264 */
  Mp4 = 0,
  /** WebM container */
  WebM = 1,
  /** Raw frames */
  Raw = 2
}
/** Initialize the library and check platform capabilities */
export declare function init(): string
/** Get information about available audio devices */
export declare function getAudioDevices(): string
/** Get information about available displays for screen capture */
export declare function getDisplays(): string
/** Request all necessary permissions for audio and screen capture */
export declare function requestPermissions(): Promise<string>
/** Check current permission status without requesting */
export declare function checkPermissions(): Promise<string>
/** Get platform-specific instructions for enabling system audio capture */
export declare function getSystemAudioSetupInstructions(): string
/** Create a new capture session with the given configuration */
export declare function createCaptureSession(config: string): string
/** Start native system audio capture demonstration */
export declare function startNativeSystemAudio(sessionId: string): Promise<string>
/** Test native system audio capture capabilities */
export declare function testNativeSystemAudio(): string
/** Create a new recording pipeline with Cap's architecture */
export declare function createRecordingPipeline(config: string): Promise<string>
/** Start recording with the specified session */
export declare function startRecording(sessionId: string): Promise<string>
/** Stop recording and finalize segments */
export declare function stopRecording(sessionId: string): Promise<string>
/** Get encoding capabilities and configuration options */
export declare function getEncodingCapabilities(): string
