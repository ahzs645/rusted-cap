[package]
name = "cap-electron-capture"
version = "0.1.0"
edition = "2021"
description = "Cross-platform screen capture and audio processing library for Electron applications"
authors = ["Cap Team"]
license = "MIT"
repository = "https://github.com/cap-so/cap"

[lib]
name = "cap_electron_capture"
crate-type = ["cdylib", "rlib"]

[dependencies]
# Core async runtime
tokio = { version = "1.0", features = ["full"] }
futures = "0.3"

# Audio processing
cpal = "0.15"
hound = "3.5"

# FFmpeg for audio encoding
ffmpeg = { package = "ffmpeg-next", version = "7.0", optional = true }
ffmpeg-sys-next = { version = "7.1.0", optional = true, features = ["build"] }

# Video/Screen capture - let's use a different approach for now
# scap = { version = "0.1.1" }

# FFI for Node.js integration
napi = { version = "2.0", features = ["async"] }
napi-derive = "2.0"

# Cross-platform utilities
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
anyhow = "1.0"
thiserror = "1.0"
log = "0.4"
env_logger = "0.10"
uuid = { version = "1.0", features = ["v4"] }

# Platform-specific dependencies
[target.'cfg(target_os = "macos")'.dependencies]
screencapturekit = "0.2"
core-foundation = "0.9"
objc = "0.2"
cocoa = "0.24"

[target.'cfg(target_os = "windows")'.dependencies]
windows = { version = "0.52", features = [
    "Win32_Graphics_Gdi",
    "Win32_UI_WindowsAndMessaging",
    "Win32_Media_Audio",
    "Win32_Media_MediaFoundation",
    "Win32_System_Threading",
    "Win32_System_Com",
] }

[target.'cfg(target_os = "linux")'.dependencies]
pipewire = "0.7"
libpulse-binding = "2.27"

[features]
default = []
audio-encoding = ["ffmpeg", "ffmpeg-sys-next"]

[build-dependencies]
napi-build = "2.0"
